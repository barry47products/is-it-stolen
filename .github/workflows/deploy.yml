name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.isitstolen.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ghcr.io/${{ github.repository }}:${{ github.sha }}-chainguard"
          # Add your staging deployment commands here
          # Examples:
          # - kubectl set image deployment/isitstolen isitstolen=ghcr.io/${{ github.repository }}:${{ github.sha }}-chainguard
          # - aws ecs update-service --cluster staging --service isitstolen --force-new-deployment
          # - docker-compose -f docker-compose.staging.yml up -d

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          # Add smoke test commands here
          # curl -f https://staging.isitstolen.com/health || exit 1

      - name: Notify Slack - Staging Deploy Success
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "‚úÖ Staging deployment successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment Successful* ‚úÖ\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack - Staging Deploy Failure
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "‚ùå Staging deployment failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment Failed* ‚ùå\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://isitstolen.com
    needs: []  # Add dependencies if needed (e.g., tests, staging deployment)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          echo "Image: ghcr.io/${{ github.repository }}:${{ github.sha }}-chainguard"
          # Add your production deployment commands here
          # Examples:
          # - kubectl set image deployment/isitstolen isitstolen=ghcr.io/${{ github.repository }}:${{ github.sha }}-chainguard
          # - aws ecs update-service --cluster production --service isitstolen --force-new-deployment
          # - docker-compose -f docker-compose.production.yml up -d

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against production..."
          # Add smoke test commands here
          # curl -f https://isitstolen.com/health || exit 1

      - name: Notify Slack - Production Deploy Success
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "üöÄ Production deployment successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment Successful* üöÄ\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack - Production Deploy Failure
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "üö® Production deployment failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment Failed* üö®\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
