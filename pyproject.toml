[tool.poetry]
name = "is-it-stolen"
version = "0.1.0"
description = "WhatsApp bot for checking and reporting stolen items"
authors = ["Barry Tandy <barry@example.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.13"
fastapi = "^0.118.0"
uvicorn = "^0.37.0"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
sqlalchemy = "^2.0.23"
alembic = "^1.12.1"
psycopg2-binary = "^2.9.9"
geoalchemy2 = "^0.18.0"
redis = "^6.4.0"
celery = "^5.3.4"
httpx = "^0.28.1"
tenacity = "^9.1.2"
sentry-sdk = {extras = ["fastapi"], version = "^2.39.0"}
pyyaml = "^6.0.1"
phonenumbers = "^9.0.15"
anyio = "^4.11.0"
pydantic-core = "^2.40.1"
starlette = "^0.48.0"
prometheus-client = "^0.23.1"
dateparser = "^1.2.2"
structlog = "^25.4.0"
python-json-logger = "^4.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.2"
pytest-asyncio = "^1.2.0"
pytest-cov = "^7.0.0"
pytest-mock = "^3.12.0"
faker = "^37.8.0"
factory-boy = "^3.3.0"
freezegun = "^1.2.2"
ruff = "^0.13.3"
mypy = "^1.7.1"
pre-commit = "^4.3.0"
ipython = "^9.6.0"
ipdb = "^0.13.13"
types-pyyaml = "^6.0.12"
pyyaml = "^6.0.3"
types-dateparser = "^1.2.2.20250809"
safety = "^3.6.2"
bandit = {extras = ["toml"], version = "^1.8.6"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Ruff configuration (replaces Black, isort, flake8, and more)
[tool.ruff]
target-version = "py313"
line-length = 88
exclude = [
    ".venv",
    "__pycache__",
    ".git",
    ".ruff_cache",
    ".mypy_cache",
    ".pytest_cache",
    "alembic",
    "*.md",
    "docs/",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "DTZ",  # flake8-datetimez
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG"]  # Unused arguments in tests are OK

[tool.ruff.lint.isort]
known-first-party = ["src"]
force-single-line = false

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

# MyPy configuration
[tool.mypy]
python_version = "3.13"
plugins = ["pydantic.mypy"]
follow_imports = "normal"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
check_untyped_defs = true
strict_equality = true
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "geoalchemy2.*",
    "redis.*",
    "celery.*",
    "alembic.*",
    "sentry_sdk.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--durations=5",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore:Parsing dates involving a day of month without a year:DeprecationWarning:dateparser.utils.strptime",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
